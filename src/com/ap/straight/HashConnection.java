/*
 * @author Jean Lazarou
 * Date: Apr 27, 2002
 */
package com.ap.straight;

import java.sql.*;
import java.util.Map;

public class HashConnection implements Connection
{
    Map map;

    HashDatabase db;

    public HashConnection(HashDatabase db)
    {
        this.db = db;
    }

    public Statement createStatement() throws SQLException
    {
        return createStatement(ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
    }

    public PreparedStatement prepareStatement(String sql) throws SQLException
    {
        return prepareStatement(sql, ResultSet.TYPE_FORWARD_ONLY, ResultSet.CONCUR_READ_ONLY);
    }

    public CallableStatement prepareCall(String sql) throws SQLException
    {
        throw new UnsupportedOperationException("Connection.prepareCall");
    }

    public String nativeSQL(String sql) throws SQLException
    {
        throw new UnsupportedOperationException("Connection.nativeSQL");
    }

    public void setAutoCommit(boolean autoCommit) throws SQLException
    {
        throw new UnsupportedOperationException("Transactions not supported");
    }

    public boolean getAutoCommit() throws SQLException
    {
        return true;
    }

    public void commit() throws SQLException
    {
    }

    public void rollback() throws SQLException
    {
    }

    public void close() throws SQLException
    {
    }

    public boolean isClosed() throws SQLException
    {
        return false;
    }

    public DatabaseMetaData getMetaData() throws SQLException
    {
        return new HashDatabaseMetaData("jdbc:ap:" + db.getName());
    }

    public void setReadOnly(boolean readOnly) throws SQLException
    {
        throw new UnsupportedOperationException("Connection.setReadOnly");
    }

    public boolean isReadOnly() throws SQLException
    {
        return false;
    }

    public void setCatalog(String catalog) throws SQLException
    {
    }

    public String getCatalog() throws SQLException
    {
        return null;
    }

    public void setTransactionIsolation(int level) throws SQLException
    {
    }

    public int getTransactionIsolation() throws SQLException
    {
        return TRANSACTION_NONE;
    }

    public SQLWarning getWarnings() throws SQLException
    {
        return null;
    }

    public void clearWarnings() throws SQLException
    {
    }

    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException
    {
        return new HashStatement(this);
    }

    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
    {
        return new HashPreparedStatement(this, sql);
    }

    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException
    {
        throw new UnsupportedOperationException("Connection.prepareCall");
    }

    public Map getTypeMap() throws SQLException
    {
        return map;
    }

    public void setTypeMap(Map map) throws SQLException
    {
        this.map = map;
    }

	public int getHoldability() throws SQLException {
		throw new UnsupportedOperationException();
	}

	public void setHoldability(int holdability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public Savepoint setSavepoint() throws SQLException {
		throw new UnsupportedOperationException();
	}

	public void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public void rollback(Savepoint savepoint) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public Savepoint setSavepoint(String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}
	
}
